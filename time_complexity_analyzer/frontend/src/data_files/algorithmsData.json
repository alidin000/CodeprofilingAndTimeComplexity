[
    {
      "name": "Insertion Sort",
      "description": "Insertion Sort is a simple sorting algorithm that builds the final sorted array one item at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort.",
      "code": {
        "python": "def insertionSort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >=0 and key < arr[j] :\n                arr[j+1] = arr[j]\n                j -= 1\n        arr[j+1] = key\n    return arr",
        "javascript": "function insertionSort(arr) {\n    for (let i = 1; i < arr.length; i++) {\n        let key = arr[i];\n        let j = i - 1;\n        while (j >= 0 && arr[j] > key) {\n            arr[j + 1] = arr[j];\n            j = j - 1;\n        }\n        arr[j + 1] = key;\n    }\n    return arr;\n}",
        "java": "public void insertionSort(int arr[]) {\n    for (int i=1; i<arr.length; ++i) {\n        int key = arr[i];\n        int j = i-1;\n        while (j>=0 && arr[j] > key) {\n            arr[j+1] = arr[j];\n            j = j-1;\n        }\n        arr[j+1] = key;\n    }\n}"
      },
      "video": "https://www.example.com/insertionsort-video",
      "quiz": [
        {
          "question": "What type of sorting algorithm is Insertion Sort?",
          "answer": "Insertion Sort is a comparison-based sorting algorithm."
        },
        {
          "question": "What is the best case time complexity of Insertion Sort?",
          "answer": "The best case time complexity is O(n) when the array is already sorted."
        }
      ]
    },
    {
      "name": "Selection Sort",
      "description": "Selection Sort is an in-place comparison-based algorithm in which the list is divided into two parts, the sorted part at the left end and the unsorted part at the right end. Initially, the sorted part is empty and the unsorted part is the entire list.",
      "code": {
        "python": "def selectionSort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr",
        "javascript": "function selectionSort(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        let minIdx = i;\n        for (let j = i+1; j < arr.length; j++) {\n            if (arr[minIdx] > arr[j]) {\n                minIdx = j;\n            }\n        }\n        [arr[i], arr[minIdx]] = [arr[minIdx], arr[i]];\n    }\n    return arr;\n}",
        "java": "public void selectionSort(int arr[]) {\n    for (int i = 0; i < arr.length-1; i++) {\n        int min_idx = i;\n        for (int j = i+1; j < arr.length; j++)\n            if (arr[min_idx] > arr[j])\n                min_idx = j;\n        int temp = arr[min_idx];\n        arr[min_idx] = arr[i];\n        arr[i] = temp;\n    }\n}"
      },
      "video": "https://www.example.com/selectionsort-video",
      "quiz": [
        {
          "question": "What type of algorithm is Selection Sort?",
          "answer": "Selection Sort is a comparison-based sorting algorithm."
        },
        {
          "question": "What is the time complexity of Selection Sort in all cases?",
          "answer": "The time complexity of Selection Sort is O(n^2) in all cases, making it inefficient on large lists."
        }
      ]
    },
    {
      "name": "Heap Sort",
      "description": "Heap Sort is a comparison based sorting technique based on Binary Heap data structure. It is similar to selection sort where we first find the maximum element and place the maximum element at the end. We repeat the same process for the remaining elements.",
      "code": {
        "python": "def heapSort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n\n        if l < n and arr[l] > arr[largest]:\n            largest = l\n\n        if r < n and arr[r] > arr[largest]:\n            largest = r\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        heapify(arr, n-i, 0)\n    return arr",
        "javascript": "function heapSort(arr) {\n    function heapify(arr, n, i) {\n        let largest = i;\n        let left = 2 * i + 1;\n        let right = 2 * i + 2;\n\n        if (left < n && arr[left] > arr[largest]) largest = left;\n        if (right < n && arr[right] > arr[largest]) largest = right;\n\n        if largest != i) {\n            [arr[i], arr[largest]] = [arr[largest], arr[i]];\n            heapify(arr, n, largest);\n        }\n    }\n    let n = arr.length;\n    for (let i = n / 2 - 1; i >= 0; i--) {\n        heapify(arr, n, i);\n    }\n    for (let i = n - 1; i > 0; i--) {\n        [arr[0], arr[i]] = [arr[i], arr[0]];\n        heapify(arr, i, 0);\n    }\n    return arr;\n}",
        "java": "public void heapSort(int arr[]) {\n    void heapify(int arr[], int n, int i) {\n        int largest = i;\n        int l = 2 * i + 1;\n        int r = 2 * i + 2;\n\n        if (l < n && arr[l] > arr[largest])\n            largest = l;\n        if (r < n && arr[r] > arr[largest])\n            largest = r;\n\n        if (largest != i) {\n            int swap = arr[i];\n            arr[i] = arr[largest];\n            arr[largest] = swap;\n            heapify(arr, n, largest);\n        }\n    }\n    int n = arr.length;\n    for (int i = n / 2 - 1; i >= 0; i--)\n        heapify(arr, n, i);\n    for (int i = n - 1; i > 0; i--) {\n        int temp = arr[0];\n        arr[0] = arr[i];\n        arr[i] = temp;\n        heapify(arr, i, 0);\n    }\n}"
      },
      "video": "https://www.example.com/heapsort-video",
      "quiz": [
        {
          "question": "What type of sorting algorithm is Heap Sort?",
          "answer": "Heap Sort is a comparison-based sorting algorithm that uses a binary heap data structure."
        },
        {
          "question": "What is the time complexity of Heap Sort?",
          "answer": "The time complexity of Heap Sort is O(n log n) for all cases."
        }
      ]
    }
  ]
  